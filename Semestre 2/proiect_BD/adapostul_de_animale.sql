CREATE TABLE CONTRACT (
    NUMAR INT PRIMARY KEY,
    DATA_EMITERE DATE,
    DURATA INT,
    TIP VARCHAR(255),
    id_angajat INT,
    FOREIGN KEY (id_angajat) REFERENCES ANGAJAT (id_angajat)
);

CREATE TABLE ANGAJAT (
    ID_ANGAJAT INT PRIMARY KEY,
    NUME VARCHAR(255),
    PRENUME VARCHAR(255),
    CNP VARCHAR(13),
    ADRESA VARCHAR(255),
    TELEFON VARCHAR(255),
    EMAIL VARCHAR(255),
    ID_CONTRACT INT,
    FOREIGN KEY (ID_CONTRACT) REFERENCES CONTRACT (NUMAR)
);

CREATE TABLE DIRECTOR (
    ID_DIRECTOR INT PRIMARY KEY,
    ID_CONTRACT INT,
    FOREIGN KEY (ID_CONTRACT) REFERENCES CONTRACT (NUMAR)
);

CREATE TABLE SECTIE (
    ID_SECTIE INT PRIMARY KEY,
    NUME VARCHAR(255)
);

CREATE TABLE SECTOR (
    ID_SECTOR INT PRIMARY KEY,
    TIP_NEVOIE VARCHAR(255),
    NUMAR_LOCURI INT
);

CREATE TABLE SECTIE_SECTOR (
    ID_SECTIE INT,
    ID_SECTOR INT,
    PRIMARY KEY (ID_SECTIE, ID_SECTOR),
    FOREIGN KEY (ID_SECTIE) REFERENCES SECTIE (ID_SECTIE),
    FOREIGN KEY (ID_SECTOR) REFERENCES SECTOR (ID_SECTOR)
);

CREATE TABLE FARMACIE (
    ID_FARMACIE INT PRIMARY KEY,
    NUME VARCHAR(255),
    TELEFON VARCHAR(255),
    PROGRAM VARCHAR(255)
);

CREATE TABLE MEDICAMENT (
    NUMAR INT PRIMARY KEY,
    DENUMIRE_PRODUS VARCHAR(255),
    CANTITATE INT,
    ID_FARMACIE INT,
    FOREIGN KEY (ID_FARMACIE) REFERENCES FARMACIE (ID_FARMACIE)
);

CREATE TABLE VIZITATOR (
    CNP VARCHAR(13) PRIMARY KEY,
    NUME VARCHAR(255),
    PRENUME VARCHAR(255),
    TELEFON VARCHAR(255),
    EMAIL VARCHAR(255)
);

CREATE TABLE CERERE_ADOPTIE (
    SERIE VARCHAR(255),
    ID_ANIMAL INT,
    ID_VIZITATOR VARCHAR(13),
    DATA DATE,
    APROBATA_DE_DIRECTOR BOOLEAN DEFAULT FALSE,
    APROBATA_DE_ASOCIATIE BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (SERIE, ID_ANIMAL, ID_VIZITATOR),
    FOREIGN KEY (ID_ANIMAL) REFERENCES ANIMAL (ID_ANIMAL),
    FOREIGN KEY (ID_VIZITATOR) REFERENCES VIZITATOR (CNP)
);



CREATE TABLE ANIMAL (
    ID_ANIMAL INT PRIMARY KEY,
    NUME VARCHAR(255),
    RASA VARCHAR(255),
    VARSTA INT,
    SEX VARCHAR(255),
    DATA_SOSIRE DATE,
    ID_CUSCA INT,
    ID_VETERINAR VARCHAR(13),
    FOREIGN KEY (ID_CUSCA) REFERENCES CUSCA (ID_CUSCA),
    FOREIGN KEY (ID_VETERINAR) REFERENCES VETERINAR (CNP)
);

CREATE TABLE CUSCA (
    ID_CUSCA INT PRIMARY KEY,
    NUMAR_LOCURI INT
);

CREATE TABLE VETERINAR (
    CNP VARCHAR(13) PRIMARY KEY,
    NUME VARCHAR(255),
    PRENUME VARCHAR(255),
    ID_ANIMAL INT,
    ID_VETERINAR VARCHAR(13),
    FOREIGN KEY (ID_ANIMAL) REFERENCES ANIMAL (ID_ANIMAL)
);

-- Inserare înregistrări în tabele
INSERT INTO CUSCA (ID_CUSCA, NUMAR_LOCURI)
VALUES (1, 2);

INSERT INTO ANIMAL (ID_ANIMAL, NUME, RASA, VARSTA, SEX, DATA_SOSIRE, ID_CUSCA, ID_VETERINAR)
VALUES (1, 'Rex', 'Câine', 3, 'Mascul', '2022-01-01', 1, '1234567890123');

-- Cereri SQL complexe
-- Cererea 1: Subcereri sincronizate în care intervin cel puțin 3 tabele
SELECT a.NUME, a.PRENUME, v.NUME AS NUME_VETERINAR
FROM ANIMAL a
JOIN ANIMAL_VETERINAR av ON a.ID_ANIMAL = av.ID_ANIMAL
JOIN VETERINAR v ON av.ID_VETERINAR = v.CNP
WHERE a.RASA = 'Câine';

-- Cererea 2: Subcereri nesincronizate în clauza FROM
SELECT AVG(cantitate) AS CANTITATE_MEDIE
FROM (SELECT CANTITATE FROM HRANA WHERE DENUMIRE_PRODUS = 'Crochete' UNION ALL SELECT CANTITATE FROM HRANA WHERE DENUMIRE_PRODUS = 'Conservă') AS sub;

-- Cererea 3: Grupări de date cu subcereri nesincronizate în care intervin cel puțin 3 tabele, funcții grup, filtrare la nivel de grupuri (în cadrul aceleiași cereri)
SELECT s.NUME AS NUME_SECTIE, COUNT(a.ID_ANIMAL) AS NUMAR_ANIMALE
FROM SECTIE_SECTOR ss
JOIN SECTIE s ON ss.ID_SECTIE = s.ID_SECTIE
JOIN ANGAJAT a ON ss.ID_ANGAJAT = a.ID_ANGAJAT
GROUP BY s.NUME
HAVING COUNT(a.ID_ANIMAL) > 2;

-- Cererea 4: Ordonare și utilizarea funcțiilor NVL și DECODE (în cadrul aceleiași cereri)
SELECT NUME, PRENUME, NVL(TELEFON, 'Număr de telefon necunoscut') AS TELEFON, DECODE(SEX, 'M', 'Masculin', 'F', 'Feminin', 'Necunoscut') AS SEX
FROM VETERINAR
ORDER BY NUME ASC;

-- Cererea 5: Utilizarea a cel puțin 2 funcții pe șiruri de caractere, 2 funcții pe date calendaristice, a cel puțin unei expresii CASE
SELECT 
    CONCAT(NUME, ' ', PRENUME) AS NUME_COMPLET, 
    UPPER(RASA) AS RASA_UPPER, 
    DATE_DIFF(CURRENT_DATE(), DATA_SOSIRE) AS VARSTA_ZILE,
    CASE 
        WHEN VARSTA > 5 THEN 'Matur'
        WHEN VARSTA <= 5 THEN 'Tânăr'
        ELSE 'Necunoscut'
    END AS CATEGORIE_VARSTA
FROM ANIMAL;


INSERT INTO CUSCA (
    ID_CUSCA,
    NUMAR_LOCURI
) VALUES (
    1,
    2
);


CREATE TABLE MAGAZIN (
    ID_MAGAZIN INT PRIMARY KEY,
    NUME VARCHAR(255),
    TELEFON VARCHAR(255),
    PROGRAM VARCHAR(255)
);

CREATE TABLE HRANA (
    NUMAR INT PRIMARY KEY,
    DENUMIRE_PRODUS VARCHAR(255),
    CANTITATE INT,
    ID_MAGAZIN INT,
    FOREIGN KEY (ID_MAGAZIN) REFERENCES MAGAZIN (ID_MAGAZIN)
);

CREATE TABLE CARTE_DE_SANATATE (
    ID_ANIMAL INT PRIMARY KEY,
    VACCINURI VARCHAR(255),
    DATA_NASTERE DATE,
    ANTECEDENTE_MEDICALE VARCHAR(255)
);

CREATE TABLE CONSULTATIE (
    ID_CONSULTATIE INT PRIMARY KEY,
    ID_ANIMAL INT,
    DATA DATE
);


CREATE TABLE CLINICA_VETERINARA (
    ID_CLINICA INT PRIMARY KEY,
    DENUMIRE VARCHAR(255),
    ADRESA VARCHAR(255),
    TELEFON VARCHAR(255),
    EMAIL VARCHAR(255)
);

-- crearea unei vizualizari complexe
CREATE VIEW v_angajati_sectii AS
SELECT an.NUME, an.PRENUME, an.ADRESA, s.NUME AS NUME_SECTIE
FROM ANGAJAT an
LEFT JOIN CONTRACT c ON an.ID_CONTRACT = c.NUMAR
LEFT JOIN DIRECTOR d ON d.ID_CONTRACT = c.NUMAR
LEFT JOIN SECTIE_SECTOR ss ON an.ID_ANGAJAT = ss.ID_ANGAJAT
LEFT JOIN SECTIE s ON ss.ID_SECTIE = s.ID_SECTIE;
